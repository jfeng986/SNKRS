// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderlistFieldNames          = builder.RawFieldNames(&Orderlist{})
	orderlistRows                = strings.Join(orderlistFieldNames, ",")
	orderlistRowsExpectAutoSet   = strings.Join(stringx.Remove(orderlistFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderlistRowsWithPlaceHolder = strings.Join(stringx.Remove(orderlistFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOrderOrderlistIdPrefix = "cache:order:orderlist:id:"
)

type (
	orderlistModel interface {
		Insert(ctx context.Context, data *Orderlist) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Orderlist, error)
		Update(ctx context.Context, data *Orderlist) error
		Delete(ctx context.Context, id string) error
	}

	defaultOrderlistModel struct {
		sqlc.CachedConn
		table string
	}

	Orderlist struct {
		Id          string    `db:"id"`           // Order ID
		Userid      int64     `db:"userid"`       // User ID
		Shippingid  int64     `db:"shippingid"`   // Receiving information table ID
		Payment     float64   `db:"payment"`      // Actual payment amount
		Paymenttype int64     `db:"paymenttype"`  // Payment type: 1-Online payment
		Status      int64     `db:"status"`       // Order status: 0-Canceled, 10-Unpaid, 20-Paid, 30-Pending shipment, 40-Pending receipt, 50-Transaction successful, 60-Transaction closed
		PaymentTime time.Time `db:"payment_time"` // Payment time
		SendTime    time.Time `db:"send_time"`    // Shipment time
		EndTime     time.Time `db:"end_time"`     // Transaction completion time
		CloseTime   time.Time `db:"close_time"`   // Transaction closure time
		CreateTime  time.Time `db:"create_time"`  // Creation time
		UpdateTime  time.Time `db:"update_time"`  // Update time
	}
)

func newOrderlistModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrderlistModel {
	return &defaultOrderlistModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`orderlist`",
	}
}

func (m *defaultOrderlistModel) withSession(session sqlx.Session) *defaultOrderlistModel {
	return &defaultOrderlistModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`orderlist`",
	}
}

func (m *defaultOrderlistModel) Delete(ctx context.Context, id string) error {
	orderOrderlistIdKey := fmt.Sprintf("%s%v", cacheOrderOrderlistIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, orderOrderlistIdKey)
	return err
}

func (m *defaultOrderlistModel) FindOne(ctx context.Context, id string) (*Orderlist, error) {
	orderOrderlistIdKey := fmt.Sprintf("%s%v", cacheOrderOrderlistIdPrefix, id)
	var resp Orderlist
	err := m.QueryRowCtx(ctx, &resp, orderOrderlistIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderlistRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderlistModel) Insert(ctx context.Context, data *Orderlist) (sql.Result, error) {
	orderOrderlistIdKey := fmt.Sprintf("%s%v", cacheOrderOrderlistIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, orderlistRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Userid, data.Shippingid, data.Payment, data.Paymenttype, data.Status, data.PaymentTime, data.SendTime, data.EndTime, data.CloseTime)
	}, orderOrderlistIdKey)
	return ret, err
}

func (m *defaultOrderlistModel) Update(ctx context.Context, data *Orderlist) error {
	orderOrderlistIdKey := fmt.Sprintf("%s%v", cacheOrderOrderlistIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderlistRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Userid, data.Shippingid, data.Payment, data.Paymenttype, data.Status, data.PaymentTime, data.SendTime, data.EndTime, data.CloseTime, data.Id)
	}, orderOrderlistIdKey)
	return err
}

func (m *defaultOrderlistModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOrderOrderlistIdPrefix, primary)
}

func (m *defaultOrderlistModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderlistRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrderlistModel) tableName() string {
	return m.table
}
