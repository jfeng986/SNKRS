// Code generated by goctl. DO NOT EDIT.
// Source: product.proto

package productservice

import (
	"context"

	"snkrs/apps/rpc_service/product/product"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ProductItem         = product.ProductItem
	ProductItemRequest  = product.ProductItemRequest
	ProductListRequest  = product.ProductListRequest
	ProductListResponse = product.ProductListResponse
	ProductRequest      = product.ProductRequest
	ProductResponse     = product.ProductResponse

	ProductService interface {
		Product(ctx context.Context, in *ProductItemRequest, opts ...grpc.CallOption) (*ProductItem, error)
		Products(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
		ProductList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*ProductListResponse, error)
	}

	defaultProductService struct {
		cli zrpc.Client
	}
)

func NewProductService(cli zrpc.Client) ProductService {
	return &defaultProductService{
		cli: cli,
	}
}

func (m *defaultProductService) Product(ctx context.Context, in *ProductItemRequest, opts ...grpc.CallOption) (*ProductItem, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.Product(ctx, in, opts...)
}

func (m *defaultProductService) Products(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.Products(ctx, in, opts...)
}

func (m *defaultProductService) ProductList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*ProductListResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.ProductList(ctx, in, opts...)
}
